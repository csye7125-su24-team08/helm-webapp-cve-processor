pipeline {
  agent any
  tools {
    nodejs 'node'
  }
  environment {
    GITHUB_CREDENTIALS = credentials('GITHUB_CREDENTIALS') 
  }
  stages {
    stage('Run CI?') {
        agent any
        steps {
          script {
            if (sh(script: "git log -1 --pretty=%B | fgrep -ie '[skip ci]' -e '[ci skip]'", returnStatus: true) == 0) {
              currentBuild.result = 'NOT_BUILT'
              error 'Skipping build due to [skip ci] in commit message.'
            }
          }
        }
      }
    stage('Clone repository') {
      steps {
        cleanWs()
        checkout scm
      }
    }
    stage('Validate Conventional Commits') {
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          echo "Validate commit messages"
          npm ci
          npx commitlint --from HEAD~1 --to HEAD --verbose
          '''
        }
      }
    }
    stage('Checks for helm') {
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          echo "Checks for helm"
          helm lint .
          '''
          def chart = readYaml file: 'Chart.yaml'
          def chartVersion = chart.version

          println "Chart version: ${chartVersion}"

        }
      }
    }
    stage('Change chart version and release') {
      when {
        branch 'main'
      }
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          npx semantic-release --dry-run > semantic-release-output.txt
          newVersion=$(grep 'next release version' semantic-release-output.txt | awk '{print $NF}')
          '''

          script {
            println "New version: ${newVersion}"
            def chart = readYaml file: 'Chart.yaml'
            chart.version = newVersion
            writeYaml file: 'Chart.yaml', data: chart
          }
          
          sh '''
          git add Chart.yaml
          npx semantic-release
          '''
        }
      }
    }
  }
  post {
    always {
      cleanWs()
    }
    success {
      echo 'Pipeline completed successfully!'
    }
    failure {
      echo 'Pipeline failed!'
    }
  }
}
